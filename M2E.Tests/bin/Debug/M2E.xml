<?xml version="1.0"?>
<doc>
    <assembly>
        <name>M2E</name>
    </assembly>
    <members>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algoirhtm used. If that algorithm needs some initialization, like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GetQueryParameters(System.String)">
            <summary>
            Internal function to cut out all non oauth query string parameters (all parameters not begining with "oauth_")
            </summary>
            <param name="parameters">The query string part of the Url</param>
            <returns>A list of QueryParameter each containing the parameter name and value</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.NormalizeRequestParameters(System.Collections.Generic.IList{M2E.Service.SocialNetwork.linkedin.oAuthBase2.QueryParameter})">
            <summary>
            Normalizes the request parameters according to the spec
            </summary>
            <param name="parameters">The list of parameters already sorted</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The signature type. To use the default values use <see cref="!:OAuthBase.SignatureTypes">OAuthBase.SignatureTypes</see>.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,M2E.Service.SocialNetwork.linkedin.oAuthBase2.SignatureTypes,System.String@,System.String@)">
            <summary>
            Generates a signature using the specified signatureType 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="signatureType">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthBase2.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:M2E.Service.SocialNetwork.linkedin.oAuthBase2.SignatureTypes">
            <summary>
            Provides a predefined set of algorithms that are supported officially by the protocol
            </summary>
        </member>
        <member name="T:M2E.Service.SocialNetwork.linkedin.oAuthBase2.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:M2E.Service.SocialNetwork.linkedin.oAuthBase2.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.AuthorizationLinkGet">
            <summary>
            Get the link to Twitter's authorization page for this application.
            </summary>
            <returns>The url with a valid request token, or a null string.</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.AccessTokenGet(System.String)">
            <summary>
            Exchange the request token for an access token.
            </summary>
            <param name="authToken">The oauth_token is supplied by Twitter's authorization page following the callback.</param>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.oAuthWebRequest(M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.Method,System.String,System.String)">
            <summary>
            Submit a web request using oAuth.
            </summary>
            <param name="method">GET or POST</param>
            <param name="url">The full url, including the querystring.</param>
            <param name="postData">Data to post (querystring format)</param>
            <returns>The web server response.</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.APIWebRequest(System.String,System.String,System.String)">
            <summary>
            WebRequestWithPut
            </summary>
            <param name="method">WebRequestWithPut</param>
            <param name="url"></param>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.WebRequest(M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.Method,System.String,System.String)">
            <summary>
            Web Request Wrapper
            </summary>
            <param name="method">Http Method</param>
            <param name="url">Full url to the web resource</param>
            <param name="postData">Data to post in querystring format</param>
            <returns>The web server response.</returns>
        </member>
        <member name="M:M2E.Service.SocialNetwork.linkedin.oAuthLinkedIn.WebResponseGet(System.Net.HttpWebRequest)">
            <summary>
            Process the web response.
            </summary>
            <param name="webRequest">The request object.</param>
            <returns>The response data.</returns>
        </member>
    </members>
</doc>
